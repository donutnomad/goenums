// Code generated by goenums. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums
// using the command:
// goenums filename.go

package sale

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"strconv"
	"strings"
)

type DiscountType struct {
	discountType
}

type discounttypeContainer struct {
	UNKNOWN    DiscountType
	PERCENTAGE DiscountType
	AMOUNT     DiscountType
	GIVEAWAY   DiscountType
}

var Discounttypes = discounttypeContainer{
	UNKNOWN: DiscountType{
		discountType: unknown,
	},
	PERCENTAGE: DiscountType{
		discountType: percentage,
	},
	AMOUNT: DiscountType{
		discountType: amount,
	},
	GIVEAWAY: DiscountType{
		discountType: giveaway,
	},
}

func (c discounttypeContainer) All() []DiscountType {
	return []DiscountType{
		c.UNKNOWN,
		c.PERCENTAGE,
		c.AMOUNT,
		c.GIVEAWAY,
	}
}

var invalidDiscountType = DiscountType{}

func ParseDiscountType(a any) DiscountType {
	switch v := a.(type) {
	case DiscountType:
		return v
	case []byte:
		return stringToDiscountType(string(v))
	case string:
		return stringToDiscountType(v)
	case fmt.Stringer:
		return stringToDiscountType(v.String())
	case int:
		return intToDiscountType(v)
	case int64:
		return intToDiscountType(int(v))
	case int32:
		return intToDiscountType(int(v))
	}
	return invalidDiscountType
}

func stringToDiscountType(s string) DiscountType {
	lwr := strings.ToLower(s)
	switch lwr {
	case "unknown":
		return Discounttypes.UNKNOWN
	case "percentage":
		return Discounttypes.PERCENTAGE
	case "amount":
		return Discounttypes.AMOUNT
	case "giveaway":
		return Discounttypes.GIVEAWAY
	}
	return invalidDiscountType
}

func intToDiscountType(i int) DiscountType {
	if i < 0 || i >= len(Discounttypes.All()) {
		return invalidDiscountType
	}
	return Discounttypes.All()[i]
}

func ExhaustiveDiscountTypes(f func(DiscountType)) {
	for _, p := range Discounttypes.All() {
		f(p)
	}
}

var validDiscounttypes = map[DiscountType]bool{
	Discounttypes.UNKNOWN:    true,
	Discounttypes.PERCENTAGE: true,
	Discounttypes.AMOUNT:     true,
	Discounttypes.GIVEAWAY:   true,
}

func (p DiscountType) IsValid() bool {
	return validDiscounttypes[p]
}

func (p DiscountType) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *DiscountType) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	*p = ParseDiscountType(b)
	return nil
}

func (p *DiscountType) Scan(value any) error {
	*p = ParseDiscountType(value)
	return nil
}

func (p DiscountType) Value() (driver.Value, error) {
	return p.String(), nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[unknown-0]
	_ = x[percentage-1]
	_ = x[amount-2]
	_ = x[giveaway-3]
}

const _discounttype_name = "unknownpercentageamountgiveaway"

var _discounttype_index = [...]uint16{0, 7, 17, 23, 31}

func (i discountType) String() string {
	if i < 0 || i >= discountType(len(_discounttype_index)-1) {
		return "discounttype(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _discounttype_name[_discounttype_index[i]:_discounttype_index[i+1]]
}
